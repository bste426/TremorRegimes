#pip install git+https://github.com/sevamoo/SOMPY.git#egg=SOMPYimport matplotlib.pylab as pltimport globimport sompy as sompyimport pandas as pdimport numpy as npimport pickleimport datetimefrom pandas.plotting import register_matplotlib_convertersimport matplotlib.dates as mdatesimport loggingimport os########### TRAINING STAGE ###########Graphics = False # False disables graphics, e.g. for batchlogging.getLogger('matplotlib.font_manager').disabled = Trueplt.interactive(True)  # does not block after each plotmapsize = [30, 30]n_clusters = 8PATH = os.getcwd()+'/feature_matrices/'FILE = []EXTNAME = []Errors = []names = []fl = PATH+'*.csv'files = glob.glob(fl)for i in range(len(files)): FILE = files[i][77:] filename=PATH+FILE df = pd.read_csv(filename,header=None, skiprows=1) dlen= df.shape[0] df.head() dfselection2=pd.DataFrame(data=df.iloc[0:dlen,1:df.shape[1]])  # columns from 1 to 5. Not using column 0 which is time Traindata = dfselection2.values som = sompy.SOMFactory.build(Traindata, mapsize, mask=None, mapshape='planar', lattice='rect', normalization='var', initialization='pca', neighborhood='gaussian', training='batch', name='sompy')  # this will use the default parameters, but i can change the initialization and neighborhood methods   #all_mapshapes = ['planar','toroid','cylinder'] ## Only planar is implemented!!!   #all_lattices = ['hexa','rect']   #all_initialization = ['random','pca'] som.train(n_job=6, verbose='debug')   #verbose='info' medium. verbose='debug' will print more, and verbose=None wont print anything te = som.calculate_topographic_error() qe = np.mean(som._bmu[1]) print ("Topographic error = %s; Quantization error = %s" % (te,qe)) teqe = (te,qe) Errors.append(teqe) EXTNAME = '_{:s}cl_{:s}size_final.pkl'.format(str(n_clusters),str(mapsize)[1:3]) names.append(str(FILE+EXTNAME)) cl = som.cluster(n_clusters=n_clusters) getattr(som, 'cluster_labels') ''' ###TESTING STAGE (only activate if test data set deviates from training data set)  filename='PATH/NAME_OF_TEST_FEATURE_MATRIX.csv' df = pd.read_csv(filename,header=None,skiprows=1) dlen= df.shape[0] dfselection2=pd.DataFrame(data=df.iloc[0:dlen,1:df.shape[1]])   # columns from 1 to 5. Not using column 0 which is time  Testdata = dfselection2.values  ###USING TRAINED SOM TO TEST NEW DATA output = som.project_data(Testdata) ''' output= som.project_data(Traindata) #Deactivate if new test data set is used. For now, test data = training data outputDF=pd.DataFrame(output) #for each data, outputDF contains its assigned SOM node (bmu) cloutput=cl[output] #for each data, cloutput contains its assigned cluster cloutputDF=pd.DataFrame(cloutput) time_np = df[0] if not os.path.isdir('maps'):  os.makedirs('maps') with open('maps/'+FILE+EXTNAME, 'wb') as f:  # Python 3: open(..., 'wb')  pickle.dump([time_np, cloutput], f) ########### PLOTTING STAGE ########### stationComp = 'WIZHHZ'  # just for the title register_matplotlib_converters()  # to avoid warnings with open('maps/'+FILE+EXTNAME,'rb') as f:  # Python 3: open(..., 'wb')  time_np, cloutput = pickle.load(f) time_np2 = [] for x in range(len(time_np)):  time_np2.append(datetime.datetime.strptime(str(time_np[x]), '%Y-%m-%d %H:%M:%S')) time_np = np.array(time_np2) # plot initialization fig, axarr = plt.subplots(sharex=False, sharey=False) fig.set_size_inches(15.5, 8.5) axarr.set_yticklabels([]) axarr.axis('off') ax = fig.add_subplot(1, 1, 1, sharex=fig.axes[0]) colormap = np.array(['r', 'g', 'b', 'black', 'purple']) tminimo = 0; tmassimo = time_np.shape[0] colours = cloutput[tminimo:tmassimo] % colormap.shape[0] ax.scatter(time_np[tminimo:tmassimo], cloutput[tminimo:tmassimo]+1, c=colormap[colours]) ax.set_xlim(min(time_np), max(time_np)) ax.set_ylabel('Cluster number') ax.grid(linestyle='dotted', which='both') plt.pause(0.001) fig.subplots_adjust(hspace=0.05) plt.setp([a.get_xticklabels() for a in fig.axes[:-1]], visible=False) # change interval of ticks on x-axis here depending on length of time-period covered by data ax.xaxis.set_minor_locator(mdates.MonthLocator(interval=3)) ax.xaxis.set_major_locator(mdates.MonthLocator(interval=3)) ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d')) fig.autofmt_xdate() # save plot if not os.path.isdir('../__OUTPUT'):  os.makedirs('../__OUTPUT') path = '../__OUTPUT/'+FILE+EXTNAME+'.png' plt.savefig(path, dpi=200)# generate csv containing TE and QE for each maprownames = ['te','qe']TE_QE = pd.DataFrame(Errors, columns=names, index=rownames)TE_QE.to_csv("SOM_accuracy.csv")